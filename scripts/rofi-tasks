#!/usr/bin/env ruby

# frozen_string_literal: true

require 'json'
require 'date'
require 'dotenv'

# `overload` instead of `load` because we want to be able to alter the ENV at
# runtime (for context switching)
Dotenv.overload('~/.context.env')

context =
  if ENV['CONTEXT'] == 'home'
    '-@work'
  else
    '-@home'
  end

def parse_time(str)
  return unless str

  DateTime.iso8601(str).to_time.getlocal
end

raw_tasks = `task \
    rc._forcecolor:yes \
    rc.row.padding:0 \
    rc.defaultwidth:240 \
    rc.detection:off \
    rc.verbose:nothing \
  -DELETED -COMPLETED #{context} export`

tasklist = JSON.parse(raw_tasks)

tasks = Hash.new { |h, k| h[k] = [] }

communication = ->(task) { task['project'] == 'communication' }
inbox = ->(task) { task['tags']&.include?('inbox') }
someday = ->(task) { task['tags']&.include?('someday') }
started = ->(task) { task['start'] }
today = lambda do |task|
  return unless task['scheduled']

  parse_time(task['scheduled']) <= Time.now
end
wait = ->(task) { task['wait'] && parse_time(task['wait']) >= Time.now }
later = lambda do |task|
  return unless task['scheduled']

  parse_time(task['scheduled']) > Time.now && !someday.call(task)
end
shopping = ->(task) { task['project'] == 'shopping' }
improvements = ->(task) { task['project'] == 'improvements' }
retrospective = ->(task) { task['project'] == 'retrospective' }
recent = ->(task) { parse_time(task['entry']) + 120 >= Time.now }

String.class_eval do
  def fit_in(length, elipse)
    if size > length
      self[0..length - 1 - elipse.size] + elipse
    else
      ljust(length)
    end
  end

  def colorize(color)
    return self unless color

    "<span foreground='#{color}'>#{self}</span>"
  end

  def html_escape
    gsub('&', '&amp;').
      gsub('<', '&lt;').
      gsub('>', '&gt;')
  end

  def escape
    strip.
      gsub(' ', '\ ').
      gsub('(', '\(').
      gsub(')', '\)').
      gsub("'") { "\\'" }
  end
end

Object.class_eval do
  def fit_in(length, elipse)
    to_s.fit_in(length, elipse)
  end
end

output = lambda do |label, key, color|
  return if tasks[key].empty?

  format = lambda do |task|
    annot = "  [#{task['annotations'].size}]" if task['annotations']&.any?
    str = '%<prio>s %<label>s %<desc>s %<sched>s %<proj>s %<tags>s %<key>s %<id>s' % {
      label: label,
      prio: task['priority'].fit_in(1, ''),
      sched: parse_time(task['scheduled']).fit_in(10, ''),
      desc: "#{annot} #{task['description']}".fit_in(105, '…').html_escape,
      proj: task['project'].fit_in(14, '…'),
      tags: task['tags']&.join(', '),
      key: key,
      id: task['uuid'].split('-')[0]
    }
    str.colorize(color)
  end
  sort = ->(task) { -task['urgency'].to_i }
  <<~STR
    #{tasks[key].sort_by(&sort).map(&format).join("\n")}
  STR
end

tasklist.each do |entry|
  category =
    case entry
    when wait then nil
    when started then 'started'
    when communication then 'communication'
    when inbox then 'inbox'
    when today then 'today'
    when shopping then 'course'
    when improvements then 'improvements'
    when retrospective then 'retrospective'
    when later then 'later'
    when someday then 'someday'
    else 'other'
    end

  tasks['recent'] << entry if recent.call(entry)
  tasks[category] << entry if category
end

priority =
  begin
    lines = IO.
      readlines("#{ENV['HOME']}/.priorities.#{ENV['CONTEXT']}").
      map(&:strip).
      map(&:html_escape)

    case lines.size
    when 0 then nil
    when 1 then lines[0]
    else "\n#{lines.map { |line| "- #{line}" }.join("\n")}"
    end
  rescue Errno::ENOENT
    nil
  end

help = <<~STR.strip
  <b>Return</b>    <i>Done</i>         | <b>Ctrl+d</b> <i>Delete</i>
  <b>Ctrl+Ret.</b> <i>Edit</i>         | <b>Ctrl+o</b> <i>Open</i>
  <b>Ctrl+s</b>    <i>Schedule</i>     | <b>Ctrl+S</b> <i>Wait</i>
  <b>Ctrl+t</b>    <i>Start/Stop</i>   | <b>Ctrl+T</b> <i>Switch global context</i>
  <b>Ctrl+i</b>    <i>Set priority</i> | <b>Ctrl+l</b> <i>Change labels</i>
  <b>Ctrl+b</b>    <i>Annotate</i>     | <b>Ctrl+B</b> <i>Change context</i>
  ————
  <b>Tab</b>            <i>Mark</i>
  #{(priority.nil? ? nil : "\n<b>Week goal</b>: #{priority}")&.colorize('#dc322f')}
STR

rofi = <<~STR.strip
  rofi \
    -dmenu \
    -i \
    -p  \
    -mesg "#{help}" \
    -no-history \
    -lines 22 \
    -multi-select \
    -markup-rows \
    -format p \
    -kb-custom-1 "Return" \
    -kb-custom-2 "Control+Return" \
    -kb-custom-3 "Control+d" \
    -kb-custom-4 "Control+s" \
    -kb-custom-5 "Control+t" \
    -kb-custom-6 "Control+i" \
    -kb-custom-7 "Control+o" \
    -kb-custom-8 "Control+T" \
    -kb-custom-9 "Control+S" \
    -kb-custom-10 "Control+b" \
    -kb-custom-11 "Control+B" \
    -kb-custom-12 "Control+l" \
    -kb-accept-entry "" \
    -kb-remove-char-forward "Delete" \
    -kb-accept-custom "" \
    -kb-accept-alt "Tab" \
    -kb-move-char-back "Left" \
    -kb-mode-complete "" \
    -kb-row-tab "" \
    -kb-element-next "" \
    -kb-element-prev ""
STR

results = `echo -n "#{[
  output.call('', 'started', '#859900'),
  output.call('', 'communication', '#d33682'),
  output.call('', 'today', '#b58900'),
  output.call('', 'inbox', '#93a1a1'),
  output.call('', 'course', '#93a1a1'),
  output.call('', 'improvements', '#268bd2'),
  output.call('', 'retrospective', '#6c71c4'),
  output.call('', 'recent', '#d33682'),
  output.call('', 'later', '#93a1a1'),
  output.call('', 'someday', '#2aa198'),
  output.call('', 'other', '#dc322f')
].join}" | #{rofi}`

exit 0 unless results.length.positive?

uuids = results.split("\n").map { |line| line.split(' ')[-1] }

def confirm(message)
  rofi = <<~STR.strip
    rofi \
      -dmenu \
      -lines 2 \
      -i \
      -p  \
      -no-history \
      -mesg " #{message}"
  STR

  `echo -e "✔ Yes\n✖ No" | #{rofi}`.strip == '✔ Yes'
end

case $?.exitstatus
when 10 # 'Return'
  msg = "You are about to mark #{uuids.size} element(s) as done. Is that OK?"
  if uuids.size == 1 || confirm(msg)
    uuids.each { |uuid| `task rc.confirmation:0 done #{uuid}` }
  end
when 11 # 'Control+Return'
  `kitty --class scratchpad task edit #{uuids.join(' ')}`
when 12 # 'Control+d'
  msg = "You are about to delete #{uuids.size} element(s). Is that OK?"
  if uuids.size == 1 || confirm(msg)
    uuids.each { |uuid| `task rc.confirmation:0 delete #{uuid}` }
  end
when 13 # 'Control+s'
  sched =
    `rofi -dmenu -p "" -theme-str "#content { children: [inputbar]; }"`.escape
  if sched.length >= 0
    dir = sched.strip.empty? ? '+' : '-'
    msg = "You are about to schedule #{uuids.size} element(s). Is that OK?"
    cmd = "task rc.confirmation:0 %s mod #{dir}inbox -someday sched:#{sched}"
    uuids.each { |uuid| `#{cmd % uuid}` } if uuids.size == 1 || confirm(msg)
  end
when 14 # 'Control+t'
  uuids.each do |uuid|
    needle = tasks['started'].find { |task| task['uuid'].split('-')[0] == uuid }
    if needle
      `task rc.confirmation:0 stop #{uuid}`
    else
      `task rc.confirmation:0 start #{uuid}`
    end
  end
when 15 # 'Control+i'
  rofi = <<~STR.strip
    rofi \
      -dmenu \
      -lines 3 \
      -i \
      -p  \
      -no-history
  STR

  priority = {
    'High' => 'H',
    'Medium' => 'M',
    'Low' => 'L'
  }[`echo -e "Medium\nHigh\nLow" | #{rofi}`.strip]

  if priority
    uuids.
      each { |uuid| `task rc.confirmation:0 #{uuid} mod priority:#{priority}` }
  end
when 16 # 'Control+o'
  `yes | taskopen -b #{uuids.join(' ')}`

  exit 0
when 17 # 'Control+T'
  context =
    case ENV['CONTEXT']
    when 'home' then 'work'
    when 'work' then 'home'
    else 'home'
    end

  `fish -c "cont #{context}"`
when 18 # 'Control+S'
  sched =
    `rofi -dmenu -p "" -theme-str "#content { children: [inputbar]; }"`.escape
  if sched.length >= 0
    msg = "You are about to wait on #{uuids.size} element(s). Is that OK?"
    cmd = "task rc.confirmation:0 %s mod wait:#{sched}"
    uuids.each { |uuid| `#{cmd % uuid}` } if uuids.size == 1 || confirm(msg)
  end
when 19 # 'Control+b'
  annotation =
    `rofi -dmenu -p "" -theme-str "#content { children: [inputbar]; }"`.
    strip.
    escape

  unless annotation.empty?
    msg = "You are about to annotate #{uuids.size} element(s). Is that OK?"
    cmd = "task rc.confirmation:0 %s annotate #{annotation}"
    uuids.each { |uuid| `#{cmd % uuid}` } if uuids.size == 1 || confirm(msg)
  end
when 20 # 'Control+B'
  rofi = <<~STR.strip
    rofi \
      -dmenu \
      -lines 3 \
      -i \
      -p  \
      -no-history
  STR

  context = {
    'Home' => '+@home -@work',
    'Work' => '-@home +@work',
    'None' => '-@home -@work'
  }[`echo -e "Home\nWork\nNone" | #{rofi}`.strip]

  if context
    msg = "You are about to change context of #{uuids.size} element(s). Is that OK?"
    cmd = "task rc.confirmation:0 %s mod #{context}"
    uuids.each { |uuid| `#{cmd % uuid}` } if uuids.size == 1 || confirm(msg)
  end
when 21 # 'Control+l'
  warning = '<b>Do not forget + or -</b>'
  labels =
    `rofi -dmenu -p "" -theme-str "#content { children: [inputbar,message]; }" -mesg "#{warning}"`.
    strip

  unless labels.empty?
    msg = "You are about to change labels of #{uuids.size} element(s). Is that OK?"
    cmd = "task rc.confirmation:0 %s mod #{labels}"
    uuids.each { |uuid| `#{cmd % uuid}` } if uuids.size == 1 || confirm(msg)
  end
end

Process.spawn($0)

# vim: tw=100
