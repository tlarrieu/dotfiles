#!/usr/bin/env ruby

# frozen_string_literal: true

require 'cgi'

class SearchEngine

  def initialize(target, fallback: nil, prefixes: [])
    @target = target
    @fallback = fallback
    @prefix = prefixes.map { |s| "#{s} " }.join
  end

  private

  def combine(str)
    if str.strip.empty? && !@fallback.nil?
      @fallback % escape("#{@prefix}#{str}")
    else
      @target % escape("#{@prefix}#{str}")
    end
  end

end

class Man < SearchEngine

  def initialize
    super('man %s')
  end

  def run(str)
    `kitty --class man fish -c '#{combine(str)}'`
  end

  def escape(str)
    str
  end

end

class Browser < SearchEngine

  def initialize(target, fallback: nil, prefixes: [], profile: nil)
    super(target, fallback:, prefixes:)
    @profile = profile
  end

  def run(str)
    `browser-kiosk #{@profile} '#{combine(str)}'`
  end

  def escape(str)
    CGI.escape(str)
  end

end

class GitHub < Browser

  def initialize
    super(url('search?q=%s'), fallback: url('stars'))
  end

  def run(str)
    if str.match('.*/.*')
      `browser-kiosk #{@profile} '#{url(str)}'`
    else
      super
    end
  end

  private

  def url(str=nil)
    "https://github.com/#{str}"
  end

end

class BrowserWithContext < Browser

  def run(str)
    `browser-with-context #{@profile} '#{combine(str)}'`
  end

end

class YouTube < Browser

  def initialize
    super(url('results?q=%s'), fallback: url, profile: 'perso')
  end

  def run(str)
    case str
    when 'later' then `browser-kiosk perso '#{url('playlist?list=WL')}'`
    else super
    end
  end

  private

  def url(str=nil)
    "https://www.youtube.com/#{str}"
  end

end

class Dictionary

  def initialize(dictionaries={})
    @dictionaries = dictionaries
    @default = dictionaries.first&.last
  end

  def run(str)
    words = str.split
    dictionary = @dictionaries[words[0]]

    dictionary ? words.shift : dictionary = @default
    Browser.new(dictionary).run(words.join(' '))
  end

end

class BrowserRaw < Browser

  def escape(str)
    str
  end

end

defaultengine = BrowserWithContext.new('https://duckduckgo.com/?ia=web&q=%s')

# rubocop:disable Layout/HashAlignment
searchengines = {
  'a'    => Browser.new('https://wiki.archlinux.org/index.php/%s'),
  'am'   => Browser.new('https://www.amazon.fr/s?k=%s', profile: 'perso'),
  'aw'   => Browser.new(
    'https://duckduckgo.com/?ia=web&q=%s',
    prefixes: ['site:https://awesomewm.org/doc'],
    profile: 'perso'
  ),
  'def'  => Dictionary.new(
    'en' => 'https://dictionary.cambridge.org/dictionary/english/%s',
    'fr' => 'https://dictionnaire.lerobert.com/definition/%s'
  ),
  'dt'   => Browser.new('https://www.dndtools.net/spells/?name=%s&_filter=Filter', profile: 'perso'),
  'gh'   => GitHub.new,
  'h'    => Browser.new('https://www.haskell.org/hoogle?hoogle=%s'),
  'l'    => Browser.new('http://localhost:%s'),
  'lor'  => Browser.new('https://attunement.io/search?query=%s', profile: 'perso'),
  'm'    => Browser.new('https://scryfall.com/search?q=%s', profile: 'perso'),
  'man'  => Man.new,
  'map'  => Browser.new('https://www.google.com/maps/search/%s/', profile: 'perso'),
  'nerd' => Browser.new('https://www.nerdfonts.com/cheat-sheet?q=%s'),
  'py'   => Browser.new('https://pypi.org/search/?q=%s'),
  'r'    => Browser.new('https://reddit.com/r/%s', profile: 'perso'),
  'rb'   => Browser.new('https://rubygems.org/search?query=%s'),
  't'    => BrowserRaw.new('https://tpb.party/search/%s', profile: 'perso'),
  'th'   => Browser.new('https://www.thesaurus.com/browse/%s?s=t'),
  'trad' => Browser.new('https://translate.google.com?sl=fr&tl=en&text=%s'),
  'tw'   => Browser.new('https://www.twitch.tv/search?term=%s', profile: 'perso'),
  'v'    => Browser.new('https://vimawesome.com/?q=%s'),
  'w'    => Browser.new('https://en.wikipedia.org/wiki/Special:Search?search=%s'),
  'wiki' => Browser.new('https://en.wikipedia.org/wiki/Special:Search?search=%s'),
  'wp'   => Browser.new('https://wallhaven.cc/search?q=%s&atleast=3440x1440', profile: 'perso'),
  'ym'   => Browser.new('https://music.youtube.com/search?q=%s', profile: 'perso'),
  'yt'   => YouTube.new
}
# rubocop:enable Layout/HashAlignment

query = `rofi -dmenu -p "Ôê¢" -theme-str "#listview { enabled: false; }"`
words = query.split

if words.any?
  engine = searchengines[words[0]]

  if engine
    words.shift
  elsif words[0].match('http.?://.*')
    engine = Browser.new(words.join)
  end

  (engine || defaultengine).run(words.join(' '))
elsif query == "\n"
  `browser-with-context`
end
